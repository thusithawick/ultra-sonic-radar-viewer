
#include <Servo.h>

Servo myservo;
int pos = 0;
int trigPin = 11;
int echoPin = 12;


int delayMs = 5;
int searchAngle = 180;
int skipAngle = 2;
int play = 0;

void setup() {
  for (int i = 4; i < 8; i++) {
    pinMode(i, OUTPUT);
  }
  Serial.begin(9600);
  myservo.attach(9);
  pinMode(echoPin, INPUT);
  pinMode(trigPin, OUTPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
}

void loop() {
  String s = Serial.readString();
  if (s != "") {
    searchAngle = split(s, ';', 0).toInt();
    skipAngle = split(s, ';', 1).toInt();
    delayMs = split(s, ';', 2).toInt();
    play = split(s, ';', 3).toInt();
  }
  if (play == 1) {
    Serial.print(";s");
    for (pos = 0; pos <= searchAngle; pos += skipAngle) {
      myservo.write(pos);
      scan();
      delay(delayMs);
    }
    delay(1000);
    Serial.print(";s");
    for (pos = searchAngle; pos >= 0; pos -= skipAngle) {
      myservo.write(pos);
      scan();
      delay(delayMs);
    }
  }
}

void scan() {
  long distance, duration;
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  int cm = duration / (2 * 29.1);
  String s = ";";
  s = s + pos;
  s = s + ":";
  s = s + (cm);
  Serial.print(s);
  /*
  if (cm<100 & cm>50) {
    digitalWrite(7, HIGH);
  } else if (cm<49 & cm>20) {
    digitalWrite(7, HIGH);
    digitalWrite(6, HIGH);
  } else if (cm<19 & cm> 8) {
    digitalWrite(7, HIGH);
    digitalWrite(6, HIGH);
    digitalWrite(5, HIGH);
  } else if (cm < 7) {
    digitalWrite(7, HIGH);
    digitalWrite(6, HIGH);
    digitalWrite(5, HIGH);
    digitalWrite(4, HIGH);

  }
  delay(50);
  digitalWrite(7, LOW);
  digitalWrite(6, LOW);
  digitalWrite(5, LOW);
  digitalWrite(4, LOW);
  */
}

String split(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = {0, -1};
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}